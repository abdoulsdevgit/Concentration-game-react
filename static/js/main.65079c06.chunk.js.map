{"version":3,"sources":["concentration/components/card/card.module.css","concentration/grid.module.css","concentration/components/card/card.jsx","concentration/grid.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","value","card","this","props","isMatched","styles","matched","isFaceUp","faceDown","className","container","onClick","emoji","Component","indexOfTheOnlyFacedUpCard","Grid","handleClick","index","grid","state","map","setState","identifier","newGame","intializeGame","emojies","i","secondCard","push","NUMBER_OF_PAIRS_OF_CARDS","temp","rand","Math","floor","random","renderCard","key","_","menu","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,mBAAmB,SAAW,uBAAuB,QAAU,wB,oBCA5HD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,qB,wOCiCpCC,E,uKA5BP,IAAIC,EAAQ,KACRC,EAAOC,KAAKC,MAAMF,KAYtB,OATID,EADDC,EAAKG,UACIC,IAAOC,QACTL,EAAKM,SACHF,IAAOJ,KAEPI,IAAOG,SAMf,yBAAKC,UAAS,UAAKJ,IAAOK,UAAZ,YAAyBV,GAASW,QAAST,KAAKC,MAAMQ,SAChE,yBAAKF,UAAS,UAAKT,IAEXE,KAAKC,MAAMF,KAAKM,SAAUN,EAAKW,MAAO,S,GApB3CC,aCQfC,GAA6B,EAyHlBC,E,kDAtHX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IAeVa,YAAc,SAACC,GAGX,IAAIC,EAAI,YAAO,EAAKC,MAAMD,MACfA,EAAKD,GAERb,aAI0B,IAA/BU,GAECI,EAAKE,KAAI,SAACnB,GAAD,OAAUA,EAAKM,UAAW,KACnCW,EAAKD,GAAOV,UAAW,EACvB,EAAKc,SAAS,CAACH,SACfJ,EAA4BG,GAEzBA,IAAUH,IAETI,EAAKD,GAAOV,UAAW,EACvB,EAAKc,SAAS,CAACH,SAEZA,EAAKD,GAAOK,aAAeJ,EAAKJ,GAA2BQ,aAE1DJ,EAAKD,GAAOb,WAAY,EACxBc,EAAKJ,GAA2BV,WAAY,GAIhD,EAAKiB,SAAS,CAACH,SAEfJ,GAA6B,KA/CtB,EAwDnBS,QAAU,WACN,EAAKC,iBAzDU,EA6DnBA,cAAgB,WAGZ,IAFA,IAAMN,EAAO,GACPO,EAAU,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAClDC,EAAI,EAAGA,EApES,EAoEqBA,IAAK,CAG/C,IAAMzB,EAAO,CACTM,UAAU,EACVH,WAAW,EACXkB,WAAYI,EACZd,MAAOa,EAAQC,IAEfC,EAAU,eAAQ1B,GACtBiB,EAAKU,KAAK3B,GACViB,EAAKU,KAAKD,GAId,IAAK,IAAID,EAAI,EAAGA,EAAIG,GAA8BH,IAAK,CACnD,IAAII,EAAOZ,EAAKQ,GACZK,EAAOC,KAAKC,MAAMD,KAAKE,SAAWR,GACtCR,EAAKQ,GAAKR,EAAKa,GACfb,EAAKa,GAAQD,EAGjB,EAAKT,SAAS,CAAEH,UAtFD,EAyFnBiB,WAAa,SAAClB,GACV,OACI,kBAAC,EAAD,CACImB,IAAKnB,EACLhB,KAAM,EAAKkB,MAAMD,KAAKD,GACtBN,QAAS,kBAAM,EAAKK,YAAYC,OA3FxC,EAAKE,MAAQ,CACTD,KAAM,IAJK,E,gEAWfhB,KAAKsB,kB,+BAyFC,IAAD,OACL,OACI,yBAAKf,UAAS,UAAKJ,IAAOa,OAGlBhB,KAAKiB,MAAMD,KAAKE,KAAI,SAACiB,EAAGpB,GAEpB,OAAO,EAAKkB,WAAWlB,MAG/B,yBAAKR,UAAWJ,IAAOiC,MACnB,4BAAQ3B,QAAST,KAAKqB,SAAtB,4B,GAhHDV,a,MCAJ0B,MATf,WACE,OACE,yBAAK9B,UAAY,OACf,wEACA,kBAAC,EAAD,QCIc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65079c06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__PxXUe\",\"card\":\"card_card__FVUut\",\"faceDown\":\"card_faceDown__3nYuQ\",\"matched\":\"card_matched__1n_e-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"grid_grid__1flFK\",\"menu\":\"grid_menu__ivpCT\"};","import React, {Component} from \"react\";\r\nimport styles from \"./card.module.css\";\r\n\r\nclass Card extends Component {\r\n    render() {\r\n\r\n        let value = null;\r\n        let card = this.props.card;\r\n\r\n        if(card.isMatched) {\r\n            value = styles.matched\r\n        } else if(card.isFaceUp) {\r\n            value = styles.card;\r\n        } else /*if(!card.isFaceUp)*/ {\r\n            value = styles.faceDown;\r\n        }\r\n\r\n\r\n        // console.log(this.props.card.isMatched)\r\n        return(\r\n            <div className={`${styles.container} ${value}`} onClick={this.props.onClick}>\r\n                <div className={`${value}`}>\r\n                    {\r\n                        this.props.card.isFaceUp? card.emoji: ''\r\n                    }\r\n                </div>\r\n                {/* <span>X</span> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Card;","import React, { Component } from \"react\";\r\nimport styles from \"./grid.module.css\";\r\nimport Card from './components/card/card';\r\n\r\n/**\r\n * TODO: Add the ability for the user to add Number of cards\r\n * TODO: Add New Game Button\r\n * TODO: Add Restart Button\r\n * TODO: Make the cards flip\r\n */\r\nconst NUMBER_OF_PAIRS_OF_CARDS = 8;\r\nlet indexOfTheOnlyFacedUpCard = -1;\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            grid: [],\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n    // initialize the grid in here.\r\n        this.intializeGame();\r\n    \r\n    }\r\n\r\n    \r\n    handleClick = (index) => {\r\n\r\n        \r\n        let grid = [...this.state.grid];\r\n        let card = grid[index];\r\n        \r\n        if(card.isMatched) {\r\n            return;\r\n        }\r\n        // one card up\r\n        if(indexOfTheOnlyFacedUpCard === -1) { // all cards are facedown we clicked one card.\r\n            // make all the cards face down put this card face up\r\n            grid.map((card) => card.isFaceUp = false);\r\n            grid[index].isFaceUp = true;\r\n            this.setState({grid})\r\n            indexOfTheOnlyFacedUpCard = index;\r\n        } else {\r\n            if(index !== indexOfTheOnlyFacedUpCard) {\r\n                // face that card up.\r\n                grid[index].isFaceUp = true;\r\n                this.setState({grid}); // update the game\r\n                \r\n                if(grid[index].identifier === grid[indexOfTheOnlyFacedUpCard].identifier) {\r\n                    // match them \r\n                    grid[index].isMatched = true;\r\n                    grid[indexOfTheOnlyFacedUpCard].isMatched = true;\r\n                } else {\r\n                    // if they are not matched now what?\r\n                }\r\n                this.setState({grid});\r\n\r\n                indexOfTheOnlyFacedUpCard = -1;\r\n            }\r\n\r\n        \r\n        }\r\n\r\n        \r\n    }\r\n\r\n    newGame = () => {\r\n        this.intializeGame();\r\n    }\r\n\r\n    // initializes game. also called for new Game or restart.\r\n    intializeGame = () => {\r\n        const grid = [];\r\n        const emojies = ['ðŸ‘¹', 'ðŸ‘º', 'ðŸ¤¡', 'ðŸ’©', 'ðŸ‘»', 'ðŸ‘¾', 'ðŸ¤–', 'ðŸ‘½'];\r\n        for (let i = 0; i < NUMBER_OF_PAIRS_OF_CARDS; i++) {\r\n\r\n            //each card has the following properties.\r\n            const card = {\r\n                isFaceUp: false,\r\n                isMatched: false,\r\n                identifier: i,\r\n                emoji: emojies[i],\r\n            };\r\n            let secondCard = { ...card };\r\n            grid.push(card);\r\n            grid.push(secondCard);\r\n        }\r\n\r\n        // randomize the cards\r\n        for (let i = 0; i < NUMBER_OF_PAIRS_OF_CARDS * 2; i++) {\r\n            let temp = grid[i];\r\n            let rand = Math.floor(Math.random() * i);\r\n            grid[i] = grid[rand];\r\n            grid[rand] = temp;\r\n        }\r\n\r\n        this.setState({ grid });\r\n    }\r\n\r\n    renderCard = (index) => {\r\n        return (\r\n            <Card\r\n                key={index} \r\n                card={this.state.grid[index]}\r\n                onClick={() => this.handleClick(index)}\r\n            />\r\n        );\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`${styles.grid}`}>\r\n        \r\n                {\r\n                    this.state.grid.map((_, index) => {\r\n                        //return console.log(card);\r\n                        return this.renderCard(index)\r\n                    })\r\n                }\r\n                <div className={styles.menu}>\r\n                    <button onClick={this.newGame}>New Game / Restart</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","import React from 'react';\r\nimport Grid from './concentration/grid';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className = \"App\" >\r\n      <h1>Welcome To Concentration Match the Cards</h1>\r\n      <Grid / >\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}